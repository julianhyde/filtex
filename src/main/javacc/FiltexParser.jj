/*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */

options {
  STATIC = false;
  IGNORE_CASE = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(FiltexParserImpl)

package net.hydromatic.filtex.parse;

import net.hydromatic.filtex.ast.Ast;
import net.hydromatic.filtex.ast.AstNode;
import net.hydromatic.filtex.ast.Bound;
import net.hydromatic.filtex.ast.Date;
import net.hydromatic.filtex.ast.DatetimeUnit;
import net.hydromatic.filtex.ast.Location;
import net.hydromatic.filtex.ast.Op;
import net.hydromatic.filtex.ast.Pos;
import net.hydromatic.filtex.ast.Time;
import net.hydromatic.filtex.ast.Unit;

import org.checkerframework.checker.nullness.qual.Nullable;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;

import static net.hydromatic.filtex.ast.AstBuilder.ast;

/**
 * Parser for filter expressions, generated from FiltexParser.jj by JavaCC.
 */
public class FiltexParserImpl implements FiltexParser {
  private static final Logger LOGGER =
      LoggerFactory.getLogger("net.hydromatic.filtex.parse");

  private static final Pattern YEAR_PATTERN =
     Pattern.compile("[0-9][0-9][0-9][0-9]");

  private static final Pattern POSITIVE_INTEGER_PATTERN =
     Pattern.compile("[1-9][0-9]*");

  private int lineOffset;
  private String file = "";

  public void setTabSize(int tabSize) {
    jj_input_stream.setTabSize(tabSize);
  }

  public Pos pos() {
    return new Pos(file,
        token.beginLine - lineOffset, token.beginColumn,
        token.endLine - lineOffset, token.endColumn + 1);
  }

  public void zero(String file) {
    this.file = file;
    if (jj_input_stream.bufpos >= 0) {
      this.lineOffset = jj_input_stream.bufline[jj_input_stream.bufpos];
    }
  }
}

PARSER_END(FiltexParserImpl)

/* For Debug */
JAVACODE
void debug_message1()
{
  LOGGER.info("{} , {}", getToken(0).image, getToken(1).image);
}

/** Parses a date filter expression followed by end-of-file. */
AstNode dateExpressionEof() : {
  final AstNode node;
}
{
  node = dateExpression() <EOF> { return node; }
}

/** Parses a location filter expression followed by end-of-file. */
AstNode locationExpressionEof() : {
  final AstNode node;
}
{
  node = locationExpression() <EOF> { return node; }
}

/** Parses a numeric filter expression followed by end-of-file. */
AstNode numericExpressionEof() : {
  final AstNode node;
}
{
  node = numericExpression() <EOF> { return node; }
}

// == Date ===================================================================

/** Parses a date expression.
 *
 * <p>Accepts expressions like: TODO
 */
AstNode dateExpression() : {
  final List<AstNode> list = new ArrayList<>();
}
{
  addDateTerm(list)
  ( <COMMA> addTerm(list) )*
  { return ast.logicalExpression(list); }
}

/** Adds a date term to a list. */
void addDateTerm(List<AstNode> list) : {
  final AstNode node;
}
{
  node = dateTerm() { list.add(node); }
}

/** Parses a date term. */
AstNode dateTerm() : {
  final boolean is;
  final AstNode node;
}
{
  node = userAttribute() { return node; }
//| node = range() { return node; }
| node = onDatetime() { return node; }
| node = yearQuarter() { return node; }
| node = yearMonth() { return node; }
| node = year() { return node; }
| node = relativeRange() { return node; }
//| node = fromNow() { return node; }
| // Lookahead is required to choose between thisRange (e.g. "this day to
  // hour") and thisNext (e.g. "this day")
  LOOKAHEAD(3)
  node = thisRange() { return node; }
| node = thisNext() { return node; }
| node = last() { return node; }
//| node = dayInterval() { return node; }
| node = dayExpression() { return node; }
| node = absoluteBeforeAfter() { return node; }
| node = fiscalQuarter() { return node; }
| node = fiscalYear() { return node; }
| node = nulls() { return node; }
}

// E.g. "3 days"
Ast.Interval nInterval() : {
  final BigDecimal value;
  final DatetimeUnit unit;
}
{
  value = positiveInteger()
  unit = intervalUnit() {
    return ast.interval(unit, value);
  }
}

BigDecimal positiveInteger() : {}
{
  LOOKAHEAD( { getToken(1).kind == NUMBER_LITERAL
    && POSITIVE_INTEGER_PATTERN.matcher(getToken(1).image).matches() } )
  <NUMBER_LITERAL> { return new BigDecimal(token.image); }
}

// "today", "friday"
AstNode dayExpression() : {
  final String day;
}
{
  (
    day = dayOfWeekKeyword()
  | day = dayKeyword()
  ) { return ast.day(day); }
}

String dayKeyword() : {}
{
  (<TODAY> | <YESTERDAY> | <TOMORROW>) {
    return token.image.toLowerCase(Locale.ROOT);
  }
}

String dayOfWeekKeyword() : {}
{
  ( <MONDAY> | <TUESDAY> | <WEDNESDAY> | <THURSDAY> | <FRIDAY> | <SATURDAY>
  | <SUNDAY>) {
    return token.image.toLowerCase(Locale.ROOT);
  }
}

AstNode year() : {}
{
  LOOKAHEAD( { getToken(1).kind == NUMBER_LITERAL
    && YEAR_PATTERN.matcher(getToken(1).image).matches() } )
  <NUMBER_LITERAL> { return ast.year(Integer.parseInt(token.image)); }
}

AstNode fiscalYear() : {}
{
  <FY_YEAR> {
    return ast.fiscalYear(Integer.parseInt(token.image.substring(2)));
  }
}

AstNode fiscalQuarter() : {}
{
  <FY_YEAR_QUARTER> {
    return ast.fiscalQuarter(Integer.parseInt(token.image.substring(2, 6)),
        Integer.parseInt(token.image.substring(8, 9)));
  }
}

// "2018/05", "2018/05 for 2 months"
AstNode yearMonth() : {
  final int year;
  final int month;
  final Ast.Interval end;
}
{
  <YEAR_MONTH> {
    year = Integer.parseInt(token.image.substring(0, 4));
    month = Integer.parseInt(token.image.substring(5, 7));
  }
  ( <FOR> end = nInterval() {
      return ast.monthInterval(year, month, end);
    }
  | { return ast.month(year, month); }
  )
}

// "2018-Q4"
AstNode yearQuarter() : {}
{
  <YEAR_QUARTER> {
    return ast.quarter(Integer.parseInt(token.image.substring(0, 4)),
        Integer.parseInt(token.image.substring(6, 7)));
  }
}

// break units as used by the this/next/last expressions
DatetimeUnit intervalUnit() : {
  DatetimeUnit unit;
}
{
  unit = timeUnit() { return unit; }
| unit = dateUnit() { return unit; }
}


// break units as used by the this/next/last expressions
DatetimeUnit timeUnit() : {}
{
  ("hour" | "hours" | "minute" | "minutes" | "second" | "seconds") {
    return DatetimeUnit.of(token.image);
  }
}

DatetimeUnit dateUnit() : {}
{
  ("year" | "years"
  | "fiscal_year" | "fiscal_years"
  | "quarter" | "quarters"
  | "fiscal_quarter" | "fiscal_quarters"
  | "month" | "months"
  | "week" | "weeks"
  | "day" | "days") {
    return DatetimeUnit.of(token.image);
  }
}

// "this day", "next week"
AstNode thisNext() : {
  final Op op;
  final DatetimeUnit unit;
}
{
  ( <THIS> { op = Op.THIS; }
  | <NEXT> { op = Op.NEXT; }
  )
  unit = dateUnit() {
    return ast.thisUnit(op, unit);
  }
}

// "last year",
// "last 3 days"
AstNode last() : {
  final Ast.Interval interval;
  final DatetimeUnit unit;
}
{
  <LAST>
  ( unit = intervalUnit() {
      return ast.thisUnit(Op.LAST, unit);
    }
  | interval = nInterval() {
      return ast.lastInterval(interval.value, interval.unit);
    }
  )
}

// "this day to second"
AstNode thisRange() : {
 final DatetimeUnit startInterval;
 final DatetimeUnit endInterval;
}
{
  <THIS> startInterval = intervalUnit() <TO> endInterval = intervalUnit() {
    return ast.thisRange(startInterval, endInterval);
  }
}

// True for "from now", false for "ago"
boolean intervalType() : {}
{
  <AGO> { return false; }
| <FROM> <NOW> { return true; }
}

// "3 days from now for 2 weeks"
// "3 months ago for 2 days"
// "3 days ago for 3 days" (complete)
// "3 days"
// "3 days ago"
AstNode relativeRange() : {
  final Ast.Interval startInterval;
  final boolean fromNow;
  final Ast.Interval endInterval;
}
{
  startInterval = nInterval()
  (
    fromNow = intervalType()
    (
      <FOR> endInterval = nInterval()  {
        if (startInterval.equals(endInterval)) {
          return ast.past(startInterval.value, startInterval.unit, true);
        }
        return ast.relativeRange(fromNow, startInterval, endInterval);
      }
    |
      { return ast.relative(fromNow, startInterval); }
    )
  |
    { return ast.past(startInterval.value, startInterval.unit); }
  )
}

// Returns true for "before", false for "after"
boolean beforeAfter() : {}
{
  <BEFORE> { return true; }
| <AFTER> { return false; }
}

// "after 2018/05/10",
// "before 2018/05/10"
// "before 3 days"
// "before 3 days ago"
// "before 3 days from now"
AstNode absoluteBeforeAfter() : {
  final boolean before;
  final Ast.Interval interval;
  final boolean fromNow;
  final Op op;
  final DatetimeUnit unit;
  final Date date;
}
{
  before = beforeAfter()
  (
    interval = nInterval()
    ( fromNow = intervalType()
    | { fromNow = false; }
    )
    { return ast.relativeUnit(before, fromNow, interval.value, interval.unit); }
  | op = thisNextLast()
    unit = dateUnit() {
      return ast.relative1(before, op, unit);
    }
  | date = datetime() { return ast.absolute(date, before); }
  )
}

Op thisNextLast() : {}
{
  <THIS> { return Op.THIS; }
| <LAST> { return Op.LAST; }
| <NEXT> { return Op.NEXT; }
}

// "2019/01/01 08:45:00" (on)
// or "2018/05/10 for 5 months" (rangeInterval)
// or "2018-05-18 12:00:00 to 2018-05-18 14:00:00" (range)
AstNode onDatetime() : {
  final Date start;
  final Ast.Interval endInterval;
  final Date end;
}
{
  start = datetime()
  (
    <FOR> endInterval = nInterval() {
      return ast.rangeInterval(start, endInterval);
    }
  | <TO> end = datetime() { return ast.range(start, end); }
  | { return ast.on(start); }
  )
}

// Date or Datetime
Date datetime() : {
  final Date date;
  final Time time;
}
{
  date = date()
  ( time = time() { return date.plus(time); }
  | { return date; }
  )
}

Date date() : {}
{
  <YYYY_MM_DD> {
    return new Date(Integer.parseInt(token.image.substring(0, 4)),
      Integer.parseInt(token.image.substring(5, 7)),
      Integer.parseInt(token.image.substring(8, 10)));
  }
}

Time time() : {}
{
  <HH_MM_SS> {
    return new Time(Integer.parseInt(token.image.substring(0, 2)),
      Integer.parseInt(token.image.substring(3, 5)),
      token.image.length() == 8
        ? Integer.parseInt(token.image.substring(6, 8))
        : null);
  }
}

// == Location ===============================================================

/** Parses a location expression.
 *
 * <p>Accepts expressions like:
 * "{@code 36.97, -122.03}",
 * "{@code 40 miles from 36.97, -122.03}",
 * "{@code inside box from 72.33, -173.14 to 14.39, -61.70}"
 */
AstNode locationExpression() : {
  final AstNode node;
  final Location location;
}
{
  LOOKAHEAD(2) // distinguish location (number comma) from circle (number unit)
  node = circle() { return node; }
| location = location() { return ast.point(location); }
| node = box() { return node; }
| node = userAttribute() { return node; }
| node = nulls() { return node; }
| node = anywhere() { return node; }
}

AstNode anywhere() : {}
{
  { return ast.anywhere(); }
}

AstNode nulls() : {}
{
  <NULL> { return ast.isNull(true); }
| <NOT> <NULL> { return ast.isNotNull(); }
| "-" <NULL> { return ast.isNotNull(); }
}

AstNode box() : {
  final Location from;
  final Location to;
}
{
  <INSIDE> <BOX> <FROM> from = location() <TO> to = location() {
    return ast.box(from, to);
  }
}

AstNode circle() : {
  final BigDecimal distance;
  final Unit unit;
  final Location location;
}
{
  distance = number()
  unit = unit() <FROM> location = location() {
    if (distance.signum() < 0) {
      throw new ParseException("expected a positive value");
    }
    return ast.circle(distance, unit, location);
  }
}

Location location() : {
  final BigDecimal latitude;
  final BigDecimal longitude;
}
{
  latitude = number() <COMMA> longitude = number() {
    if (latitude.compareTo(BigDecimal.valueOf(-90)) < 0
        || latitude.compareTo(BigDecimal.valueOf(90)) > 0) {
      throw new ParseException("expected a number between -90 and 90");
    }
    if (longitude.compareTo(BigDecimal.valueOf(-180)) < 0
        || longitude.compareTo(BigDecimal.valueOf(180)) > 0) {
      throw new ParseException("expected a number between -180 and 180");
    }
    return new Location(latitude, longitude);
  }
}

Unit unit() : {}
{
  <METERS> { return Unit.METER; }
| <FEET> { return Unit.FOOT; }
| <KILOMETERS> { return Unit.KILOMETER; }
| <MILES> { return Unit.MILE; }
}

// == Number =================================================================

/** Parses a numeric expression.
 *
 * <p>Accepts expressions like "not 66, 99, 4", "1 to 100"
 * and returns an AST.
 * See https://docs.looker.com/reference/filter-expressions#number
 *
 * <p>A top-level numeric expression is a comma-separated list of terms.
 */
AstNode numericExpression() : {
  final List<AstNode> list = new ArrayList<>();
}
{
  addTerm(list)
  ( ( <COMMA> | <OR> ) addTerm(list) )*
  { return ast.logicalExpression(list); }
}

/** Adds a term to a list. */
void addTerm(List<AstNode> list) : {
  final AstNode node;
}
{
  node = term() { list.add(node); }
}

/** Parses a numeric term. */
AstNode term() : {
  final boolean is;
  final AstNode node;
}
{
  node = userAttribute() { return node; }
|
  is = is()
  (
    <NULL> { node = ast.isNull(is); }
  | node = intervalComp1(is)
  | node = intervalComp2(is)
  | node = to(is)
  | node = interval(is)
  )
  { return node; }
}

/** Reads an optional prefix ("not", "&lt;&gt;", "!=") and returns whether the
 * following term should be negated. */
boolean is() : {}
{
  <NOT> { return false; }
| <BANG_EQ> { return false; }
| <LT_GT> { return false; }
| { return true; }
}

/* Special rules for defining BETWEEN ranges using comparison operators with AND/OR */

/** Special interval,
 * "{@code >= 7 AND <80.44}" becomes "(7, 80.44)", and
 * "{@code >=80.44 OR <.1}" becomes "(0.01, 80.44]".
 * Also parses comparison, "{@code > 10}". */
AstNode intervalComp1(boolean is) : {
 final Bound leftBound;
 final BigDecimal left;
 final BigDecimal right;
 final Bound rightBound;
 final boolean reverse;
}
{
  ( ">" { leftBound = Bound.OPEN; }
  | ">=" { leftBound = Bound.CLOSED; }
  )
  left = number()
  (
    ( <AND> { reverse = false; }
    | <OR> { reverse = true; }
    )
    ( "<" { rightBound = Bound.OPEN; }
    | "<=" { rightBound = Bound.CLOSED; }
    )
    right = number() {
      if (reverse) {
        // FIXME number_grammar.ts passes false, should pass !is
        return ast.between(!is, leftBound.flip(), rightBound.flip(), right,
            left);
      } else {
        return ast.between(is, leftBound, rightBound, left, right);
      }
    }
  |
    { return ast.between(is, leftBound, Bound.ABSENT, left, null); }
  )
}

/** Special interval, second kind;
 * "{@code <=80.44  AND    >.1}"  becomes "(0.01, 80.44]", and
 * "{@code <= 7 OR >80.44}" becomes "[7, 80.44)".
 * Also parses comparison, "{@code < 10}". */
AstNode intervalComp2(boolean is) : {
 final Bound leftBound;
 final BigDecimal left;
 final BigDecimal right;
 final Bound rightBound;
 final boolean reverse;
}
{
  ( "<" { leftBound = Bound.OPEN; }
  | "<=" { leftBound = Bound.CLOSED; }
  )
  left = number()
  (
    ( <AND> { reverse = false; }
    | <OR> { reverse = true; }
    )
    ( ">" { rightBound = Bound.OPEN; }
    | ">=" { rightBound = Bound.CLOSED; }
    )
    right = number() {
      if (reverse) {
        // FIXME number_grammar.ts passes false, should pass !is
        return ast.between(!is, rightBound.flip(), leftBound.flip(), left, right);
      } else {
        return ast.between(is, rightBound, leftBound, right, left);
      }
    }
  |
    { return ast.between(is, Bound.ABSENT, leftBound, null, left); }
  )
}

/** Parses a range (such as "5 to 10", "to 10", "5 to"), and also a numeric
 * literal (such as "5"). */
AstNode to(boolean is) : {
  final BigDecimal begin;
  final BigDecimal end;
}
{
  begin = number()
  (
    <TO>
    (
      end = number() {
        return ast.between(is, Bound.CLOSED, Bound.CLOSED, begin, end);
      }
    | { return ast.between(Op.CLOSED_ABSENT, is, begin); }
    )
  | { return ast.numberLiteral(is, begin); }
  )
|
  <TO> end = number() {
    return ast.between(Op.ABSENT_CLOSED, is, end);
  }
}

AstNode interval(boolean is) : {
 Bound leftBound;
 final @Nullable BigDecimal left;
 final @Nullable BigDecimal right;
 Bound rightBound;
}
{
  ( "(" { leftBound = Bound.OPEN; } | "[" { leftBound = Bound.CLOSED; } )
  (
    left = number()
  | ("-inf")? { left = null; }
  )
  <COMMA>
  (
    right = number()
  | ("inf")? { right = null; }
  )
  ( ")" { rightBound = Bound.OPEN; } | "]" { rightBound = Bound.CLOSED; } ) {
    // FIXME: Grammar allows both bounds absent, e.g. '[,]' and '(-inf,inf)'
    //   but should not
    if (left == null) {
      leftBound = Bound.ABSENT;
    }
    if (right == null) {
      rightBound = Bound.ABSENT;
    }
    if (left == null && right == null) {
      throw new ParseException("unbounded interval");
    }
    return ast.between(is, leftBound, rightBound, left, right);
  }
}

AstNode userAttribute() : {}
{
  <DOUBLE_LBRACE> "_user_attributes[" "]" <DOUBLE_RBRACE> {
    throw new UnsupportedOperationException("userAttribute");
  }
}

BigDecimal number() : {}
{
  ( <NUMBER_LITERAL> | <NUMBER_LITERAL0> ) { return new BigDecimal(token.image); }
}

/* LITERALS */

// The following tokens are in the (unused) lexical state NEVER because we want
// to use their definitions in other tokens but not be parsed as whole tokens.
<NEVER> TOKEN :
{
  < YYYY: ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] >
| < MM: "0"["0"-"9"] | "1"["0"-"2"] >
| < DD: "0"["1"-"9"] | "1"["0"-"9"] | "2"["0"-"9"] | "3"["0"-"1"] >
| < HH: "0"["1"-"9"] | "1"["0"-"9"] | "2"["0"-"3"] >
| < MI: ["0"-"5"]["0"-"9"] >
| < SS: ["0"-"5"]["0"-"9"] >
| < POSITIVE_INTEGER: ["1"-"9"](["0"-"9"])* >
}

<DEFAULT> TOKEN :
{
  < DATE_SEP: "/" | "-" >
| < TIME_SEP: ":" >

| < YEAR_MONTH: <YYYY> <DATE_SEP> <MM> >
| < YYYY_MM_DD: <YYYY> <DATE_SEP> <MM> <DATE_SEP> <DD> >
| < HH_MM_SS: <HH> <TIME_SEP> <MI> (<TIME_SEP> <SS>)? >
| < YEAR_QUARTER: ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] "-Q" ["1"-"4"] >
| < FY_YEAR: "FY" <YYYY> >
| < FY_YEAR_QUARTER: "FY" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] "-Q" ["1"-"4"] >

| < NUMBER_LITERAL: ("-")?
      (["0"-"9"])+
      ("." (["0"-"9"])+)?
      (["e", "E"] ("-")?(["0"-"9"])+)? >
| < NUMBER_LITERAL0: ("-")?
      "." (["0"-"9"])+
      (["e", "E"] ("-")?(["0"-"9"])+)? >
| < QUOTED_STRING: <DOUBLE_QUOTE> ( (~["\"", "\\"]) | ("\\" "\"") | ("\\" "\\") )* <DOUBLE_QUOTE> >
| < DOUBLE_QUOTE: "\"" >
| < CHAR_LITERAL: ("#") <QUOTED_STRING> >
}

<DEFAULT> SKIP :
{ " "
| "\t"
| "\n"
| "\r"
| "\f"
}

<DEFAULT> TOKEN :
{
  < #WHITESPACE: [ " ","\t","\n","\r","\f" ] >
}

<DEFAULT> TOKEN :
{
  < AFTER: "AFTER" >
| < AGO: "AGO" >
| < AND: "AND" >
| < BEFORE: "BEFORE" >
| < BOX: "BOX" >
| < FOR: "FOR" >
| < FROM: "FROM" >
| < INSIDE: "INSIDE" >
| < LAST: "LAST" >
| < NEXT: "NEXT" >
| < NOT: "NOT" >
| < NOW: "NOW" >
| < FEET: "FEET" >
| < KILOMETERS: "KILOMETERS" >
| < METERS: "METERS" >
| < MILES: "MILES" >
| < OR: "OR" >
| < THIS: "THIS" >
| < TO: "TO" >

| < MONDAY: "MONDAY" >
| < TUESDAY: "TUESDAY" >
| < WEDNESDAY: "WEDNESDAY" >
| < THURSDAY: "THURSDAY" >
| < FRIDAY: "FRIDAY" >
| < SATURDAY: "SATURDAY" >
| < SUNDAY: "SUNDAY" >

| < TODAY: "TODAY" >
| < YESTERDAY: "YESTERDAY" >
| < TOMORROW: "TOMORROW" >

| < BANG_EQ: "!=" >
| < LT_GT: "<>" >
| < COMMA: "," >
| < DOUBLE_LBRACE: "{{" >
| < DOUBLE_RBRACE: "}}" >
| < NULL: "NULL" >
| < EQ: "=" >
}

// End FiltexParser.jj
