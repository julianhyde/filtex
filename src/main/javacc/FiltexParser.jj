/*
 * Licensed to Julian Hyde under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Julian Hyde licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */

options {
  STATIC = false;
  IGNORE_CASE = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(FiltexParserImpl)

package net.hydromatic.filtex.parse;

import net.hydromatic.filtex.ast.Ast;
import net.hydromatic.filtex.ast.Ast.*;
import net.hydromatic.filtex.ast.AstNode;
import net.hydromatic.filtex.ast.Op;
import net.hydromatic.filtex.ast.Pos;

import com.google.common.collect.ImmutableList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static net.hydromatic.filtex.ast.AstBuilder.ast;

/**
 * Parser for filter expressions, generated from FiltexParser.jj by JavaCC.
 */
public class FiltexParserImpl implements FiltexParser
{
  private static final Logger LOGGER =
      LoggerFactory.getLogger("net.hydromatic.filtex.parse");

  private int lineOffset;
  private String file = "";

  public void setTabSize(int tabSize) {
    jj_input_stream.setTabSize(tabSize);
  }

  public Pos pos() {
    return new Pos(file,
        token.beginLine - lineOffset, token.beginColumn,
        token.endLine - lineOffset, token.endColumn + 1);
  }

  public void zero(String file) {
    this.file = file;
    if (jj_input_stream.bufpos >= 0) {
      this.lineOffset = jj_input_stream.bufline[jj_input_stream.bufpos];
    }
  }
}

PARSER_END(FiltexParserImpl)

/* For Debug */
JAVACODE
void debug_message1()
{
  LOGGER.info("{} , {}", getToken(0).image, getToken(1).image);
}

/** Parses a literal expression followed by end-of-file. */
Literal literalEof() :
{
  final Literal n;
}
{
  n = stringLiteral() <EOF> { return n; }
}


/** Parses a string literal. */
Literal stringLiteral() :
{
}
{
  <QUOTED_STRING> {
    assert token.image.charAt(0) == '"';
    assert token.image.charAt(token.image.length() - 1) == '"';
    String image = token.image.substring(1, token.image.length() - 1)
        .replace("\\\\", "\\").replace("\\\"", "\"");
    return ast.stringLiteral(pos(), image);
  }
}

/* LITERALS */

<DEFAULT> TOKEN :
{
    < NON_NEGATIVE_INTEGER_LITERAL: (["0"-"9"])+ >
    |
    < NEGATIVE_INTEGER_LITERAL: "~"(["0"-"9"])+ >
    |
    < REAL_LITERAL: ("~")?(["0"-"9"])+ "." (["0"-"9"])+ >
    |
    < SCIENTIFIC_LITERAL: ("~")?(["0"-"9"])+
                          ("." (["0"-"9"])+)?
                          ["e", "E"] ("~")?(["0"-"9"])+>
    |
    < #HEXDIGIT: ["0"-"9","a"-"f","A"-"F"] >
    |
    < #WHITESPACE:
    [ " ","\t","\n","\r","\f" ]
    >
    |
    < QUOTED_STRING: <DOUBLE_QUOTE> ( (~["\"", "\\"]) | ("\\" "\"") | ("\\" "\\") )* <DOUBLE_QUOTE> >
    |
    < CHAR_LITERAL: ("#") <QUOTED_STRING> >
}

<DEFAULT> TOKEN :
{
    < EQ: "=" >
    | < DOUBLE_QUOTE: "\"" >
}

// End FiltexParser.jj
